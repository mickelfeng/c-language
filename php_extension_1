  
  PHP c 扩展,调用php函数
  
   zval *argvs[2];
   zval *func;
   MAKE_STD_ZVAL(func);
   MAKE_STD_ZVAL(argvs[0]);
   MAKE_STD_ZVAL(argvs[1]);
   ZVAL_LONG(argvs[0], 317);
   ZVAL_STRING(argvs[1], "Lein's birthday is ",1);
   ZVAL_STRING(func, "callme",1);
   if (call_user_function(EG(function_table), NULL, func, &retval, 2, argvs) == SUCCESS) {
      zval_dtor(&retval);
   }
   
   
function callme($day,$str)
{
        echo $str.": ".$day."/n";
}
====================php 扩展调用 php 标准函数 及 操作全局变量=====================================

PHP_FUNCTION(md52)
{
	zval **strtomd5;
	if((ZEND_NUM_ARGS() != 1) || (zend_get_parameters_ex(1, &strtomd5) != SUCCESS))
	{
	   WRONG_PARAM_COUNT;
	}

	zend_fcall_info fci;
	zend_fcall_info_cache fcic = empty_fcall_info_cache;
	zval *funname,*ret_ptr = NULL;
	MAKE_STD_ZVAL(funname);
	ZVAL_STRING(funname, "md5", 1); 
	zval **param[1];

	param[0] = strtomd5;
	call_user_function_ex(EG(function_table), NULL, funname, &ret_ptr, 1, param, 0, EG(active_symbol_table));
	//call_user_function_ex(EG(function_table), NULL, funname, &ret_ptr, 1, param, 0, NULL);

	zval *new_variable;

	MAKE_STD_ZVAL(new_variable);
	ZVAL_LONG(new_variable,317);
	ZEND_SET_SYMBOL(&EG(symbol_table), "new_variable_name", new_variable);

	RETVAL_ZVAL(ret_ptr, 1, 0);
	

	zval_ptr_dtor(&funname);
	MAKE_STD_ZVAL(funname);
	
	ZVAL_STRING(funname, "gg", 1); 

	char *string_contents = "new_variable_name";
	zval *var_name;
	MAKE_STD_ZVAL(var_name);

	ZVAL_STRING(var_name, string_contents, 1); 	
	
	zend_printf("c_ext *strtomd5 = %s, func=%s\n", var_name->value.str.val , funname->value.str.val);

	param[0] = &var_name;	

	
	if(call_user_function_ex(EG(function_table), NULL, funname, &ret_ptr, 1, param, 0, EG(active_symbol_table)) != SUCCESS)
	{
	   zend_error(E_ERROR, "Function call failed");
	}

	zend_printf("c_ext new_variable = %d\n", new_variable->value.lval);
	efree(funname);
	efree(var_name);
	
}

<?php

echo md52('123qwe');

?>
==========================根据用户传入的参数调用用户函数的php扩展======================================================


PHP_FUNCTION(thread_wrok)
{
    zval *cls=NULL,*zvalue=NULL,*z_method;
 
 
    //---------------------------------------------------------
    zval ***params=NULL;
 
    int arg_count = ZEND_NUM_ARGS();
 
    if (arg_count <1 ) {
        WRONG_PARAM_COUNT;
    }
     
    params = (zval ***) safe_emalloc(sizeof(zval **), arg_count, 0);
 
    if (zend_get_parameters_array_ex(arg_count, params) == FAILURE) {
        efree(params);
        RETURN_FALSE;
    }
 
    z_method=*params[0];
     
    if(arg_count>1&¶ms[1])
    {
        cls=*params[1];
    }
 
    if ( Z_TYPE_P(z_method) != IS_STRING ) 
    {
        php_error_docref(NULL TSRMLS_CC, E_WARNING, "First param must be string");
        RETURN_FALSE;
    }
 
 
    //---------------------------------------------------------
    /*
    char *method;
    int method_len;
    if (
        zend_parse_parameters( ZEND_NUM_ARGS() TSRMLS_CC, "s|o", &method, &method_len, &cls) == FAILURE
    )
    {
        RETURN_FALSE;
    }
 
    MAKE_STD_ZVAL(z_method);
 
    ZVAL_STRING(z_method, method, 1);
     
    if (method && zend_hash_find(Z_ARRVAL_P(method_records), method, method_len + 1, (void**)&zvalue) != FAILURE) 
    {
        RETURN_FALSE;
    }
 
    */
 
    //---------------------------------------------------------
 
    zval *retval_ptr;
    arg_count = arg_count-2>0?arg_count-2:0;
    if(Z_TYPE_P(cls) == IS_OBJECT || Z_TYPE_P(cls) == IS_STRING )
    {
 
 
        if (call_user_function_ex(EG(function_table), &cls  , z_method, &retval_ptr, arg_count, arg_count?params+2:NULL , 0, NULL TSRMLS_CC) == SUCCESS) {
            if (retval_ptr) {       
                zval_ptr_dtor(&retval_ptr);
            }
        } else {
            php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to call class method: %s()", Z_STRVAL_P(z_method));
            RETURN_FALSE;
        }
    }else{
        if (call_user_function_ex(CG(function_table), NULL, z_method, &retval_ptr, arg_count, arg_count?params+2:NULL , 0, NULL TSRMLS_CC) == SUCCESS )
        {
            if (retval_ptr) {       
                zval_ptr_dtor(&retval_ptr);
            }
        } else {
            php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to call %s()", Z_STRVAL_P(z_method));
            RETURN_FALSE;
        }
    }
 
    //efree(z_method);
 
    RETURN_TRUE;
}



call:

<?php 
$br = (php_sapi_name() == "cli")? "":"<br>"; 
  
if(!extension_loaded('threadwork')) { 
    dl('threadwork.' . PHP_SHLIB_SUFFIX); 
} 
class a{ 
    function e($a1=0,$a2="") 
    {    
        echo "method e,$a1,$a2\n"; 
    }    
} 
function e($a1=0,$a2="") 
{ 
    echo "function e,$a1,$a2\n"; 
} 
  
$a=new a(); 
if(thread_wrok("e",$a)) 
{ 
    echo "a-> OK\n"; 
} 
else echo "NO\n"; 
  
if(thread_wrok("e","a",date("Y-m-d H:i:s"))) 
{ 
    echo "&a->e OK\n"; 
} 
  
if(thread_wrok("e",&$a,date("Y-m-d H:i:s"))) 
{ 
    echo "&a->e OK\n"; 
} 
thread_wrok($a); 
  
if(thread_wrok("e",NULL,222,'this is str')) 
{ 
    echo "e OK\n"; 
} 
else echo "NO\n"; 
?> 

